AWSTemplateFormatVersion: 2010-09-09

Description: |
  CloudFormation Template for Phonebook Application. This template creates Application Load Balancer 
  with Auto Scaling Group of Amazon Linux 2 (ami-026b57f3c383c2eec) EC2 Instances which host Python Flask Web Application. 
  EC2 instances are placed within WebServerSecurityGroup which allows http (80) connections only from ALBSecurityGroup, 
  and allows tcp(3306) connections only within itself. 
  RDS DB instance is placed within WebServerSecurityGroup so that Database Server can communicate with Web Servers. 
  Application Load Balancer is placed within ALBSecurityGroup which allows http (80) connections from anywhere. 
  WebServerASG Auto Scaling Group is using the WebServerLT Launch Template in order to spin up instances needed. 
  WebServerLT Launch Template is configured to prepare Python Flask environment on EC2, and to deploy Phonebook Application on Flask Server 
  after downloading the app code from Github repository.

Parameters:
  VPC:
    Description: Select VPC 
    Type: AWS::EC2::VPC::Id
 
  KeyPair:
    Description: Select Keypair
    Type: AWS::EC2::KeyPair::KeyName
  
  Subnet:
    Description: Select Subnet
    Type: List<AWS::EC2::Subnet::Id>


Resources:

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for ALB # Required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for Flask App and SSH for getting into EC2 # Required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId         
      VpcId: !Ref VPC
  
  WebServerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-026b57f3c383c2eec
        InstanceType: t2.micro
        KeyName: !Ref KeyPair 
        SecurityGroupIds:
          - !GetAtt WebServerSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub Web Server of ${AWS::StackName} Stack 
        UserData:
          Fn::Base64:
            !Sub 
              - |
                #! /bin/bash
                yum update -y
                yum install python3 -y
                pip3 install flask
                pip3 install flask_mysql
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                TOKEN="xxxxxxxxxxxxxxxxxxxxxxxx"
                FOLDER="https://$TOKEN@raw.githubusercontent.com/marsclick006/phonebook-flask-app/main"
                curl -s --create-dirs -o "/home/ec2-user/templates/index.html" -L $FOLDER/templates/index.html
                curl -s --create-dirs -o "/home/ec2-user/templates/add-update.html" -L $FOLDER/templates/add-update.html
                curl -s --create-dirs -o "/home/ec2-user/templates/delete.html" -L $FOLDER/templates/delete.html
                curl -s --create-dirs -o "/home/ec2-user/app.py" -L "$FOLDER"/phonebook-app.py
                python3 /home/ec2-user/app.py
              - MyDBURI: !GetAtt DB.Endpoint.Address

  WebServerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance 
      UnhealthyThresholdCount: 3
      HealthyThresholdCount: 2
      VpcId: !Ref VPC 
  
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets: !Ref Subnet
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - TargetGroupArn: !Ref WebServerTG
          Type: forward
      LoadBalancerArn: !Ref ALB # Required
      Port: 80
      Protocol: HTTP 
  
  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        !GetAZs "" 
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB 
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLT
        Version: !GetAtt WebServerLT.LatestVersionNumber
      MaxSize: 3 # Required
      MinSize: 1 # Required
      TargetGroupARNs:
        - !Ref WebServerTG

  DBSecGrp:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      DBSecurityGroupIngress: # Required
        - EC2SecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId
      GroupDescription: DB # Required
  DB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 0
      DBInstanceIdentifier: phonebook-app-db1
      DBName: clarusway_phonebook
      DBSecurityGroups: 
        - !Ref DBSecGrp
      Engine: mysql
      EngineVersion: 8.0.28
      MasterUsername: admin 
      MasterUserPassword: Clarusway_1
      Port: 3306
      PubliclyAccessible: true

Outputs:
  WebsiteURL:
    Value: !Sub 
      - http://${ALBAddress}
      - ALBAddress: !GetAtt ALB.DNSName
    Description: Phonebook Application Load Balancer URL